import Foundation

class Rational: CustomStringConvertible, Equatable, Comparable, NSCopying {
    private(set) var numerator: Int
    private(set) var denominator: Int
    
    var description: String {
        return "\(numerator)/\(denominator)"
    }
    
    init(_ numerator: Int, _ denominator: Int) {
        precondition(denominator != 0, "Denominator cannot be zero")
        let gcd = Rational.greatestCommonDivisor(abs(numerator), abs(denominator))
        self.numerator = numerator / gcd
        self.denominator = denominator / gcd
        if self.denominator < 0 {
            self.numerator *= -1
            self.denominator *= -1
        }
    }
    
    static func +(lhs: Rational, rhs: Rational) -> Rational {
        let num = lhs.numerator * rhs.denominator + rhs.numerator * lhs.denominator
        let den = lhs.denominator * rhs.denominator
        return Rational(num, den)
    }
    
    static func -(lhs: Rational, rhs: Rational) -> Rational {
        let num = lhs.numerator * rhs.denominator - rhs.numerator * lhs.denominator
        let den = lhs.denominator * rhs.denominator
        return Rational(num, den)
    }
    
    func multiplied(by other: Rational) -> Rational {
        return Rational(self.numerator * other.numerator, self.denominator * other.denominator)
    }

    func divided(by other: Rational) -> Rational {
        precondition(other.numerator != 0, "Division by zero")
        return Rational(self.numerator * other.denominator, self.denominator * other.numerator)
    }
    
    static func ==(lhs: Rational, rhs: Rational) -> Bool {
        return lhs.numerator == rhs.numerator && lhs.denominator == rhs.denominator
    }

    static func <(lhs: Rational, rhs: Rational) -> Bool {
        return lhs.numerator * rhs.denominator < rhs.numerator * lhs.denominator
    }
    
    func copy(with zone: NSZone? = nil) -> Any {
        return Rational(self.numerator, self.denominator)
    }

    private static func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {
        return b == 0 ? a : greatestCommonDivisor(b, a % b)
    }
}


class Calculator {
    static let shared = Calculator()
    private init() {}
    
    func calculate(expression: [Any]) -> Rational {
        var values = expression.compactMap { $0 }
        
        // Handle * and /
        var i = 0
        while i < values.count {
            if let op = values[i] as? String, (op == "*" || op == "/"),
               let left = values[i-1] as? Rational,
               let right = values[i+1] as? Rational {
                let result = (op == "*") ? left.multiplied(by: right) : left.divided(by: right)
                values.replaceSubrange(i-1...i+1, with: [result])
                i = max(i - 1, 0)
            } else {
                i += 1
            }
        }
        
        // Handle + and -
        i = 0
        while i < values.count {
            if let op = values[i] as? String,
               let left = values[i-1] as? Rational,
               let right = values[i+1] as? Rational {
                let result = (op == "+") ? left + right : left - right
                values.replaceSubrange(i-1...i+1, with: [result])
                i = max(i - 1, 0)
            } else {
                i += 1
            }
        }
        
        return values.first as! Rational
    }
}


func runTests() {
    
    let r1 = Rational(1, 2)
    let r2 = Rational(1, 3)
    let r3 = Rational(1, 6)
    let r4 = Rational(1, 4)
    
    print("r1 = \(r1), r2 = \(r2), r3 = \(r3), r4 = \(r4)")
    
    let sum = r1 + r2
    print("r1 + r2 = \(sum)")

    let diff = r1 - r2
    print("r1 - r2 = \(diff)")

    let mult = r1.multiplied(by: r2)
    print("r1 * r2 = \(mult)")

    let div = r1.divided(by: r2)
    print("r1 / r2 = \(div)")

    let copy = r1.copy() as! Rational
    print("Copy of r1: \(copy)")

    print("r1 == 2/4? \(r1 == Rational(2, 4))")
    print("r1 < r2? \(r1 < r2)")
    
    let expression: [Any] = [
        Rational(1, 2), "+",
        Rational(1, 3), "*",
        Rational(3, 5), "/",
        Rational(2, 1), "-", Rational(1, 10)
    ]
    
    let result = Calculator.shared.calculate(expression: expression)
    print("Expression result: \(result)")
}


runTests()
